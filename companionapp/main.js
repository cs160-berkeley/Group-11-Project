import Pins from "pins";import {    HorizontalSlider, HorizontalSliderBehavior} from 'sliders';import {    FieldScrollerBehavior,    FieldLabelBehavior} from 'field';import {    SystemKeyboard} from 'keyboard';import {	LabeledCheckbox} from "buttons";import { items } from "data";//@program/* Pins stuff */let remotePins;application.behavior = Behavior({    onLaunch(application) {        application.add(mainScreen);        application.add(addItemButton);        this.data = { labels: {} };        let discoveryInstance = Pins.discover(            connectionDesc => {                if (connectionDesc.name == "food-sensors") {                    trace("Connecting to remote pins\n");                    remotePins = Pins.connect(connectionDesc);                }            },            connectionDesc => {                if (connectionDesc.name == "food-sensors") {                    trace("Disconnected from remote pins\n");                    remotePins = undefined;                }            }        );	}});/* Skins */let background = new Skin({ fill: '#F2F2F2' });let orangeSkin = new Skin({ fill: '#F2994A' });let blueSkin = new Skin({ fill: '#2D9CDB' });let lightGreySkin = new Skin({ fill: '#BDBDBD' });let darkGreySkin = new Skin({ fill: '#454545' });let redSkin = new Skin({ fill: '#EB5757' });let whiteSkin = new Skin({ fill: 'white' });/* Navigation bar */let inventorySkin = new Skin({      width: 54, height:54,      texture: new Texture("assets/inventory.png"),      fill: "white",      aspect: "fit"});let inventoryButton = new Content({	name: 'invBtn',	width: 30, height: 30,	right: 30, left: 50, skin: inventorySkin,	active: true,	behavior: Behavior ({		onTouchEnded: function(content, id, x, y, ticks) {		 if (!application.main.inventory){      		application.main.remove(application.main[1]);			application.main.insert(inventoryScreen, application.main.nav);			application.add(addItemButton);		}		}	})});let shoppingSkin = new Skin({      width: 48, height:48,      texture: new Texture("assets/shopping.png"),      fill: "white",      aspect: "fit"});let shoppingButton = new Content({	name: 'shopBtn',	width: 30, height:30,	right: 50, left:30, skin: shoppingSkin,	active: true,	behavior: Behavior ({		onTouchEnded: function(content, id, x, y, ticks) {      application.main.remove(application.main[1]);	      if (application.addbtn) {	        application.remove(addItemButton);	      }			application.main.insert(shopScreen, application.main.nav);		}	})});/* Inventory Screen */let invItem = Line.template($ => ({	skin: whiteSkin,	width: 280,	top: 10,  active: true,	contents: [		new Picture({			url: $.img,			width: 70, height: 70		}),		new Column({			left: 10,			contents: [				new Label({					name: 'itemName', left:0,					style: new Style({ font: 'bold 22px Avenir', color: 'black' }),					string: $.name				}),				new Label({					name: 'quantity', left:0,					style: new Style({ font: '20px Avenir', color: 'black' }),					string: $.quantity + " oz."				}),				new Line({					skin: blueSkin,					width: $.freshness * 200, height: 10				})			]		})	],  behavior: Behavior({      onTouchEnded: function(invitem, id, x, y, ticks) {        application.main.remove(inventoryScreen);        application.remove(addItemButton);        application.main.insert(new itemScreen({itemName: $.itemName, itemPicture: $.img,        itemLife: $.freshness, quantity: invitem[1][1].string.substr(0, invitem[1][1].string.indexOf(' ')), age: ($.life * $.freshness / 100).toFixed(0),        life: ($.life - $.life * $.freshness / 100).toFixed(0), recipes: $.recipes, invId: $.invId}), application.main.nav);      }  })}))let inventoryScreen = new Column({	skin: background,	width: 320, height: 360,	name: 'inventory',	contents: 		items.map(item => new invItem({ name: item.name, img: item.img, quantity: item.quantity, freshness: item.freshness })),    behavior: Behavior ({        onDisplayed: function (content) {        	if (remotePins) {        		// Not ready        		remotePins.invoke("/ready/write", 0);	        } else {	        	trace("No remote pins\n");	        }        }    })});let addItemSkin = new Skin({      width: 85, height: 85,      texture: new Texture("assets/addbtn.png"),      fill: "white",      aspect: "fit"});let addItemButton = new Content({	name: 'addbtn',	width: 60, height:60,	top: 365, left: 250,	skin: addItemSkin,	active: true,	behavior: Behavior ({		onTouchEnded: function(content, id, x, y, ticks) {			application.main.remove(inventoryScreen);			application.remove(addItemButton);			application.main.insert(addItemScreen, application.main.nav);		}	})});/* Add item screen */let nameInputSkin = new Skin({ borders: { left: 1, right:1 , top:1, bottom: 1 }, stroke: 'gray' });let fieldStyle = new Style({ color: 'black', font: '20px', horizontal: 'left',    vertical: 'middle', left: 5, right: 5, top: 5, bottom: 5 });let fieldHintStyle = new Style({ color: '#aaa', font: '20px', horizontal: 'left',    vertical: 'middle', left: 5, right: 5, top: 5, bottom: 5 });let fieldLabelSkin = new Skin({ fill: ['transparent', 'transparent', '#C0C0C0', '#acd473'] });let itemName;let itemNameField = Container.template($ => ({    width: $.width, height: 30, top: $.top, skin: $.skin, name:"itemField",    contents: [        Scroller($, { loop: true,            left: 4, right: 4, top: 0, bottom: 0, active: true,            Behavior: FieldScrollerBehavior, clip: true,            contents: [                Label($, {                    left: 0, top: 0, bottom: 0, skin: fieldLabelSkin,                    style: fieldStyle, anchor: 'NAME',                    editable: true, string: $.name,                    Behavior: class extends FieldLabelBehavior {                        onEdited(label) {                            let data = this.data;                            data.name = label.string;                            label.container.hint.visible = (data.name.length == 0);                            itemName = data.name;                        }                    },                }),                Label($, {                    left: 4, right: 4, top: 0, bottom: 0, style: fieldHintStyle,                    string: "Item name", name: "hint"                }),            ]        })    ]}));let freshness;let FreshnessSlider = HorizontalSlider.template($ => ({    height: 30, left: 50, right: 50, top:10,    Behavior: class extends HorizontalSliderBehavior {        onValueChanged(container) {        	let amount = Math.floor( this.data.value );            addItemScreen.freshness.string = amount + " days old";            freshness = amount;        }    }}));let weight;let submitButton = Container.template($ => ({	skin: new Skin({ fill: '#2D9CDB' }),	top: 10,	width: 80, height: 30,	contents: [		Label($, {			name: 'submitButton', string: $.string , style: new Style({ font: 'bold 24px Avenir', color: 'white' })		})	],	active: true,	behavior: Behavior ({		onTouchEnded: function(content, id, x, y, ticks) {			application.main.remove(addItemScreen);			application.main.insert(inventoryScreen, application.main.nav);			inventoryScreen.insert(new invItem({					itemName: itemName,					quantity: weight,					freshness: freshness + " days old",					img: 'assets/cilantro.png' }), inventoryScreen.first);			application.add(addItemButton);		}	})}));let addItemScreen = new Column({			skin: background,			name: 'addItem',			width: 320, height: 360,			contents: [				new itemNameField({ width: 250, top: 20, name:'', skin: nameInputSkin}),				new FreshnessSlider({ min: 0, max: 5, value: 0 }),				new Label({					top: 0,					name: "freshness",					string: "0 days old",					style: new Style({ font: "20px Avenir", color: 'black' })				}),				new Container({					name: 'imgHolder',					skin: new Skin({ fill: '#c4c4c4' }),					top: 10,					width: 220, height:180,					contents: [						new Label({							name: 'str',							top:60, left:10, right: 10,							style: new Style({ font: "bold 25px Avenir", color: "white" }),							string: "Press SCAN on"						}),						new Label({							top: 80, left:10, right: 10,							style: new Style({ font: "bold 25px Avenir", color: "white" }),							string: "the food scanner!"						})					]				}),				new submitButton({string: 'FINISH'})			],		    behavior: Behavior ({		        onTouchEnded: function(content, id, x, y, ticks) {		            SystemKeyboard.hide();		            content.focus();		        },		        onDisplayed: function (content) {		        	if (remotePins) {		        		// Let device know ur ready		        		remotePins.invoke("/ready/write", 1);			        	// Take pic			        	remotePins.repeat("/scan/read", 100, value => {			        		if (value && content.imgHolder.str) {			        			content.imgHolder.empty(0);			        			content.imgHolder.add(new Picture({			        				name: 'pic',			        				url: 'assets/cilantro.png',			        				width: 220, height: 180 }));				        		content.imgHolder.add(new Container({				        			name: 'weight',				        			skin: whiteSkin,				        			bottom: 0, right:0,				        			width: 50, height: 25,				        			contents: [				        				new Label({				        					name:'weight',				        					style: new Style({ font: '20px Avenir', color: 'black' }),				        					string: '...'				        				})				        			]				        		}))			        		} else if (value == 0 && content.imgHolder.pic) {			        			content.imgHolder.empty(0);			        			content.imgHolder.add(									new Label({										name: 'str',										top:60, left:10, right: 10,										style: new Style({ font: "bold 25px Avenir", color: "white" }),										string: "Press SCAN on"									}));			        			content.imgHolder.add(									new Label({										top: 80, left:10, right: 10,										style: new Style({ font: "bold 25px Avenir", color: "white" }),										string: "the food scanner!"									}))			        		}			        	});						// Read weight			        	remotePins.repeat("/scale/read", 100, value => {			        		if (content.imgHolder.weight) {			        			weight = value.weight.toPrecision(2);			        			content.imgHolder.weight.weight.string = value.weight.toPrecision(2) + " oz.";			        		}			        	});			        } else {			        	trace("No remote pins\n");			        }		        }		    })		});/*********************** Shopping screen */let MyCheckBoxTemplate = LabeledCheckbox.template($ => ({    active: true, top: 3, left:0, height:25,    behavior: Behavior({        onSelected: function(checkBox){        },        onUnselected: function(checkBox){        }    })}));let shopInvSkin = new Skin({fill: "#425fab"});let shoppingInventoryScreen = new Column({	name:"shopInvScreen",	skin: shopInvSkin,	top:0, bottom:0, left:0, right:0,});let addItemSubmitBtn = Label.template($ => ({	width: 60, height: 28,	left: 10,	skin: new Skin({ fill: "#2D9CDB" }),	style: new Style({font: "bold 24px Avenir", color: "white"}),	string: "ADD",	active:true,	behavior: Behavior({		onTouchEnded(content){			if(itemName){				shopScreen.itemList.remove(shopScreen.itemList.newItemField);				let newEntry = new Line({					left: 20, width: 320,					contents: [						new MyCheckBoxTemplate({ name: itemName }),						new Label({							right: 0, left: 100,							style: new Style({ font: 'bold 24px Avenir', color: 'gray' }),							string: 'x',							active: true,							behavior: Behavior({								onTouchEnded: function(content){									shopScreen.itemList.remove(newEntry)								}							})						})					]				});				// shopScreen.itemList.insert(new MyCheckBoxTemplate({name: itemName}), shopScreen.itemList.addBtn);				shopScreen.itemList.insert(newEntry, shopScreen.itemList.addBtn);				itemName = 0;			}		}	})}));let newItemField = Line.template($ => ({	left: 20, top: 5,	name: 'newItemField',	contents: [		new itemNameField({			width: 200,			top: 0,			name: '',			skin: new Skin({				borders: { left:0, right:0 , top:0, bottom: 1 },				stroke: 'gray'			})		}),		new addItemSubmitBtn()	]}));//have to reuse itemName for the itemNameField part.let listAddItemBtn = new Label({	left: 20, top: 10,	name: "addBtn",	skin: new Skin({		borders:{left:1, right:1, top:1, bottom:1},		stroke: 'black'	}),	width:25, height:25,	string: '+',	style: new Style({ font: "40px Avenir", color: 'black' }),	active:true,	behavior: Behavior({		onTouchEnded: function(content){			if (!shopScreen.itemList.itemField) {				shopScreen.itemList.insert(				new newItemField(), shopScreen.itemList.addBtn)			}		}	})});let shopScreen = new Column({	skin: background,	name: 'shopping',	width: 320, height: 360,	contents: [		new Column({			name: "itemList",			top: 20, bottom:0, left:0, right:0,			contents: [				listAddItemBtn			]		}),		new Line({			bottom:10, left:10, right:10, height:35,			contents:[				new Label({					height: 35, width: 200, left:5, right: 4,					skin: new Skin({ fill: "#2D9CDB" }),					style: new Style({font: 'bold 24px Avenir', color: "white"}),					string: "ADD FROM FRIDGE",					active:true,					behavior: Behavior({						onTouchEnded(content){							application.main.remove(shopScreen);							application.main.insert(addFromFridgeScreen, application.main.nav);						}					})				}),				new Label({					height: 35, width: 130, left: 4, right: 5,					skin: new Skin({ fill: "#EB5757" }),					style: new Style({font: 'bold 24px Avenir', color: "white"}),					string: "CLEAR LIST",					active:true,					behavior: Behavior({						onTouchEnded(content){							if(shopScreen.itemList.length != 1){								shopScreen.itemList.empty(0, shopScreen.itemList.length - 1);							}						}					})				})			]		})	],    behavior: Behavior ({        onDisplayed: function (content) {        	if (remotePins) {        		// Not ready        		remotePins.invoke("/ready/write", 0);	        } else {	        	trace("No remote pins\n");	        }        }    })});/* Add from fridge screen */let itemsToAdd = []let invItemShopping = Line.template($ => ({	skin: whiteSkin,	width: 280,	top: 10,	active: $.active,	contents: [		new Picture({			url: $.img,			width: 70, height: 70		}),		new Column({			name: 'info',			left: 10,			contents: [				new Label({					name: 'itemName', left:0,					style: new Style({ font: 'bold 22px Avenir', color: 'black' }),					string: $.itemName				}),				new Label({					name: 'quantity', left:0,					style: new Style({ font: '20px Avenir', color: 'black' }),					string: $.quantity + " oz."				}),				new Label({					name: 'freshness', left:0,					style: new Style({ font: '20px Avenir', color: 'black' }),					string: $.freshness				})			]		})	],			behavior: Behavior({				onTouchEnded: function(content) {					trace("does this work?\n");					content.skin = orangeSkin;					itemsToAdd.push(content.info.itemName.string);				}			})}));let addFromFridgeScreen = new Column({	skin: background,	name: "AddFromFridge",	width: 320, height: 360,	contents: [		new invItemShopping({			itemName: 'bellpeppers1',			freshness: 'replace with status bar',			img: 'assets/bell-peppers.png',			quantity: 1,			freshness: '4 days old',			active: true,		}),		new invItemShopping({ itemName: 'lemons', freshness: 'replace with status bar',			skin: whiteSkin, img: 'assets/bell-peppers.png', active: true }),		new invItemShopping({ itemName: 'idk', freshness: 'replace with status bar',			skin: whiteSkin, img: 'assets/bell-peppers.png', active: true, }),		new invItemShopping({ itemName: 'cucumber', freshness: 'replace with status bar',			skin: whiteSkin, img: 'assets/bell-peppers.png', active: true }),		new Label({			height: 35, width: 200, left:10, right: 10, bottom: 10,			skin: new Skin({ fill: "#2D9CDB" }),			style: new Style({font: 'bold 24px Avenir', color: "white"}),			string: "ADD SELECTED ITEMS",			active:true,			behavior: Behavior({				onTouchEnded(content){					application.main.remove(addFromFridgeScreen);					application.main.insert(shopScreen, application.main.nav);					for (var i = 0; i < itemsToAdd.length; i++) {						let newEntry = new Line({							left: 20, width: 320,							contents: [								new MyCheckBoxTemplate({ name: itemsToAdd[i] }),								new Label({									right: 0, left: 100,									style: new Style({ font: 'bold 24px Avenir', color: 'gray' }),									string: 'x',									active: true,									behavior: Behavior({										onTouchEnded: function(content){											shopScreen.itemList.remove(newEntry)										}									})								})							]						});						shopScreen.itemList.insert(newEntry, shopScreen.itemList.addBtn);					}				}			})		}),	]})function spoilToColor(status, max) {  let ratio = status / max;  if (ratio >= 0.8) {    return '#00B000'  } else if (ratio >= 0.6) {    return '#309000'  } else if (ratio >= 0.4) {    return '#606000'  } else if (ratio >= 0.2) {    return '#903000'  } else {    return '#B00000'  }}let statusBar = Container.template($ => ({left: $.left, width: $.width, top: $.top, bottom: $.bottom,  contents: [    new Container({left: 0, width: $.status, top: 0, bottom: 0, skin: new Skin({fill: spoilToColor($.status, $.width), borders: {left: 1, top: 1, bottom: 1}, stroke: 'black'})}),    new Container({left: $.status, width: $.width - $.status, top: 0, bottom: 0, skin: new Skin({fill: 'white', borders: {left: 1, right: 1, top: 1, bottom: 1}, stroke: 'black'})}),    new Label({left: 0, right: 0, top: 0, bottom: 0, visible: ($.status == 0), style: new Style({font: "Bold 12px Avenir", color: "black"}), string: "SPOILED"})  ]}));let itemScreenQuantity;let itemScreenItemName;let itemScreen = Container.template($ => ({left: 0, right: 0, top: 0, bottom: 0, contents: [	new Container({left: 0, right: 0, top: 0, height: 40, skin: darkGreySkin, contents: [    new Label({left: 0, right: 0, top: 0, bottom: 0, style: new Style({font: "30px Avenir", color: "white"}), string: $.itemName})  ]}),  new Container({left: 40, right: 40, top: 50, height: 50, contents: [    new Picture({height: 40, url: $.itemPicture})  ]}),  new Container({left: 40, right: 40, top: 95, height: 60, contents: [    new Label({left: 0, right: 0, top: 5, height: 15, style: new Style({font: "bold 18px Avenir", color: "black", horizontal: "left"}), string: "Information"}),    new Label({left: 0, right: 0, top: 25, height: 15, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: $.quantity + " oz remaining"}),    new Label({left: 0, right: 0, top: 45, height: 15, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: "Entered " + $.age + " days ago (" + $.life + " remaining)"})  ]}),  new Container({left: 40, right: 40, top: 170, height: 30, contents: [    new statusBar({left: 0, width: 240, top: 5, bottom: 10, status: 2.4 * $.itemLife}),    new Label({left: 0, width: 60, top: 27, bottom: 0, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: 'Spoiled'}),    new Label({right: 0, width: 60, top: 27, bottom: 0, style: new Style({font: "18px Avenir", color: "black", horizontal: "right"}), string: 'Fresh'})  ]}),  new Container({left: 40, right: 40, top: 210, height: 85, contents: [    new Label({left: 0, right: 0, top: 5, height: 15, style: new Style({font: "bold 18px Avenir", color: "black", horizontal: "left"}), string: "Recipes"}),    new Label({left: 0, right: 0, top: 25, height: 15, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: $.recipes[0]}),    new Label({left: 0, right: 0, top: 45, height: 15, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: $.recipes[1]}),    new Label({left: 0, right: 0, top: 65, height: 15, style: new Style({font: "18px Avenir", color: "black", horizontal: "left"}), string: $.recipes[2]}),  ]}),  new Container({left: 40, right: 40, top: 300, height: 40, contents: [    Scroller($, {left: 10, width: 100, top: 5, height: 30, active: true,      Behavior: FieldScrollerBehavior, clip: true,      contents: [        Label($, {          left: 0, right: 0, top: 0, bottom: 0, skin: new Skin({fill: "white", borders: {left: 1, right: 1, top: 1, bottom: 1}, stroke: "black"}),          style: new Style({font: "18px Avenir", color: "black", horizontal: "middle", vertical: "middle", left: 5}), anchor: 'NAME', editable: true,          Behavior: class extends FieldLabelBehavior {            onEdited(label) {              let data = this.data;              data.name = label.string;              label.container.hint.visible = (data.name.length == 0);              itemScreenQuantity = data.name;            }          },        }),        new Label({          left: 4, right: 4, top: 4, bottom: 4, style: new Style({font: "18px Avenir", color: "gray"}),          string: "Quantity", name: "hint"        })      ]}),    Container($, {right: 10, width: 100, top: 5, height: 30, active: true, skin: blueSkin, contents: [      new Label({left: 0, right: 0, top: 0, bottom: 0, style: new Style({font: "bold 22px Avenir", color: "white"}), string: "UPDATE"})      ], behavior: Behavior({        onTouchBegan(button, id, x, y, ticks) {          button.skin = darkGreySkin;        },        onTouchEnded(button, id, x, y, ticks) {          button.skin = blueSkin;          if (itemScreenQuantity != "") {            button.container.container[6][0][0].string = itemScreenQuantity + " oz. of ";            button.container.container[6][0][1].string = $.itemName;            button.container.container[6].visible = true;          }        }      })    })  ]}),  Container($, {left: 0, right: 0, top: 0, bottom: 0, visible: false, name: 'modal', contents: [    Container($, {left: 60, right: 60, top: 120, bottom: 120, skin: new Skin({fill: "white", borders: {left: 1, right: 1, top: 1, bottom: 1}, stroke: "black"}),    contents: [      Label($, {left: 25, right: 25, top: 10, height: 15, style: new Style({font: "18px Avenir", color: "black"})}),      Label($, {left: 25, right: 25, top: 25, height: 15, style: new Style({font: "Bold 18px Avenir", color: "black"})}),      Label($, {left: 25, right: 25, top: 40, height: 15, style: new Style({font: "18px Avenir", color: "black"}), string: "removed"}),      Container($, {left: 40, right: 40, top: 60, height: 20, active: true, skin: lightGreySkin, contents: [        new Label({left: 0, right: 0, top: 0, bottom: 0, style: new Style({font: "bold 20px Avenir", color: "white"}), string: "UNDO"})        ], behavior: Behavior({          onTouchBegan(button, id, x, y, ticks) {            button.skin = darkGreySkin;          },          onTouchEnded(button, id, x, y, ticks) {            button.skin = lightGreySkin;            button.container.container.visible = false;          }        })      }),      Container($, {left: 40, right: 40, top: 85, height: 20, active: true, skin: blueSkin, contents: [        new Label({left: 0, right: 0, top: 0, bottom: 0, style: new Style({font: "bold 20px Avenir", color: "white"}), string: "DONE"})        ], behavior: Behavior({          onTouchBegan(button, id, x, y, ticks) {            button.skin = darkGreySkin;          },          onTouchEnded(button, id, x, y, ticks) {            button.skin = blueSkin;            button.container.container.visible = false;            let remainingQuantity = Math.round(($.quantity - itemScreenQuantity) * 100) / 100;            if (remainingQuantity > 0) {              inventoryScreen[$.invId][1][1].string = remainingQuantity + " oz.";            } else {              inventoryScreen[$.invId][1][1].string = "0 oz.";            }            application.main.remove(application.main[1]);            application.main.insert(inventoryScreen, application.main.nav);		        application.add(addItemButton);          }        })      })    ]})  ]})]}));/* Main screen */let mainScreen = new Column({	name: 'main',	left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,	contents: [		new Line({			name: 'header',			skin: new Skin({ fill: 'white' }),			height: 70, width: 320,			contents: [				new Label({					left: 20,					string: "Foodwise",					style: new Style({ font: 'bold 50px Avenir', color: '#2D9CDB' })}),			]		}),		inventoryScreen,		new Line({			skin: new Skin({ fill: 'white' }),			name: 'nav',			width: 320, height: 50,			bottom: 0,			contents: [				inventoryButton,				shoppingButton			]		})	]});